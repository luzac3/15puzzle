完全に画面外に出たオブジェクトは削除する(再描画しない)システムにして描画自体をものすごく減らす
でないとあっという間に描画が追い付かれるわね
拡縮はすべての要素のWithe,heightを書き換えればいいだけなので非常に簡単
プロパティとしてインスタンスにセットしている以上、その辺の処理はすでに余裕でできるようになっている
あとは削除フラグ(DelFlag)を設置すれば削除も余裕
問題になってくるのは、消した要素の復帰。

たとえば

□□□□□
これを右に移動させて
□□□□■
となったとする。このとき■は画面外に出たので削除される(インスタンスが配列から消滅・再描画されなくなる)
でもこれを戻したら復帰しないといけない
左に移動したら■のFlagをTrueに書き換えて復帰させる必要がある
であれば、「配列から削除する」のではなく、FlagがFalseのインスタンスは「描画しない」にする方がいい。存在はする
そして端っこの一部でも戻ってきた時点でFlagをTrueに
位置情報は残しておかないとヤバい
ただ一度しか使わないオブジェクト(たとえば攻撃エフェクトとか)は都度削除でいいし、都度削除しないと山のようにオブジェクトが増えていって邪魔でしかない
→一時オブジェクトと常駐オブジェクトは明確に分け、一時オブジェクトはガンガン削除
まあゲームで使うなら山のようなオブジェクトが作成されていくのだが・・・

立体オブジェクトの場合、一つのオブジェクト全体(マップの一要素。構成はマップオブジェクト・サーフェイサー・チップなど一つの地点にいるもの全部)をまとめてオブジェクトとして管理したい

　また立体オブジェクトを描画するときの問題点の一つが、マップをつなげて表示する際の表示順序である。
　具体的には、奥にあるはずのオブジェクトが手前のオブジェクトに乗っかって表示されてしまう危険性があるのだ

　これを避けるため、新規オブジェクトを配置するときは配置場所(Canvas上の絶対値)を参照して(表示中の)全オブジェクトと比較、



ちなみに拡大は単純な引き延ばしなので相当荒くなる。できれば読み込み時に縮小する形式で表示しておいた方が何かとクオリティが上がると思うけど、縮小表示させるのもリソース食うんだろうか

